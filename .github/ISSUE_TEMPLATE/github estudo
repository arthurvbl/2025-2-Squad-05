INTERFACE DO GITHUB:


REPOSITORIOS: onde fica os seus projetos

PULL REQUESTS: pedidos de alteracoes em projetos

ISSUES: para bugs, tarefas e documentarios

Répositorio:

É uma pasta em que você guarda os arquivos de um projeto junto com todo o historico de alteracoes.
Ele é usado principalmente no github, mas a ideia serve em geral.

O que tem em um repositorio:

os arquivos do projeto ( codigos, imagens , texto , documentacao),
o historico de versoes ( quem mudou, o que mudou, quando mudou),
as ramificacoes (branches) para desenvolver coisas em paralelo,

Tipos de repositorio:
local: fica no seu computador, criado com git init
remoto: fica em um servidor( ex: github, gitlab) usado para compartilhar e sincronizar

EXEMPLO: imagine que você esta criando um site, sem o git, você teria varias pastas com nomes tipo: site-final-V1 , site-final-V2-ajustes.
Com git ( num repositorio) tudo fica no mesmo lugar, e o git guarda automaticamente o historico, sem precisar duplicar as pastas.
COMO CRIAR UM REPOSITORIO:

CLIQUE EM NEW REPOSITORY
PREENCHA: repository name (nome do projeto) , description (descricao) , 
public ou private (se quiser que outros vejam) , marque inicialize with a README.

README é como se fosse a vitrine do seu projeto
o que colocar:
nome do projeto;
descricao: o que o projeto faz;
como instalar/rodar: passo a passo para quem quiser usar;
como contribuir: se outros quiserem colaborar
licença: se é livre, aberto, etc
tecnologias usadas: linguagens, frameworks, etc


COMMIT:
é quando você muda algo no codigo e coloca junto uma explicacao do que você mudou.
Os commits mostram todo o historico de mudanças que ocorreram no codigo


ISSUES:
é como se fosse um quadro de tarefas e problemas a serem corrigidos do projeto

FUNCOES DAS ISSUES:
relatar bugs, pedir melhorias, organizar tarefas
BRANCH: 
é um desenvolvimento separado do projeto , você pode mexer sem alterar o codigo principal

EXEMPLO:
a branch (main) é o codigo principal, você quer adicionar mais uma funcao ao codigo;
você cria uma branch com nome funcao-feature e faz todas as mudanças ali
depois pode juntar a branch com o codigo original por meio do pull request

FUNCOES DO BRANCH:
trabalhar com outras funcoes sem modificar o projeto principal
da pra ter varias pessoas trabalhando em areas diferentes ao mesmo tempo
se der algum problema, você pode apagar a branch e o codigo continua intacto
